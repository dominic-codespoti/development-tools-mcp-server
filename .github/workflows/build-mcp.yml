name: build-mcp
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
          - os: windows-latest
            rid: win-x64
          - os: macos-latest
            rid: osx-arm64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Publish self-contained single-file executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          dotnet publish src/DeveloperTools.Mcp.Server -c Release -r ${{ matrix.rid }} -p:PublishSingleFile=true -p:PublishTrimmed=true -p:SelfContained=true
          ext=""
          if [ "${{ matrix.os }}" = "macos-latest" ]; then ext=""; fi
          mv src/DeveloperTools.Mcp.Server/bin/Release/net9.0/${{ matrix.rid }}/publish/DeveloperTools.Mcp.Server mcp-${{ matrix.rid }}$ext
        shell: bash
      - name: Publish self-contained single-file executable (Windows)
        if: runner.os == 'Windows'
        run: |
          dotnet publish src/DeveloperTools.Mcp.Server -c Release -r ${{ matrix.rid }} -p:PublishSingleFile=true -p:PublishTrimmed=true -p:SelfContained=true
          Rename-Item src/DeveloperTools.Mcp.Server/bin/Release/net9.0/${{ matrix.rid }}/publish/DeveloperTools.Mcp.Server.exe mcp-${{ matrix.rid }}.exe
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: mcp-${{ matrix.rid }}
          path: mcp-${{ matrix.rid }}*
  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Generate version
        id: version
        run: echo "main-$(date -u +'%Y%m%d-%H%M%S')" > version.txt
      - name: Read version
        id: read_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"
      - name: Create tag
        run: |
          VERSION=$(cat version.txt)
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag $VERSION
          git push origin $VERSION
      - name: Flatten artifacts directory
        run: |
          find ./artifacts -type f -exec mv {} ./artifacts/ \;
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.read_version.outputs.version }}
          name: Release ${{ steps.read_version.outputs.version }}
          files: ./artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
